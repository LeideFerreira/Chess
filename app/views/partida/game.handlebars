<div class="container">
  <div style="margin: auto">
    <div class="col">
      <button id="button" class="btn btn-success" onclick="connect()">Connect</button>
    </div>
    <div id="board" style="width: 500px; margin: auto"></div>
    <div id="player"></div>
    <div id="status">Join Game</div>
  </div>
</div>

<script>
  var game = new Chess();
  const socket = io();
  const color = '{{color}}';
  const fen = 'start';
  const partida = {{ partida }};
  const botao = document.getElementById('botao');

  game.load(fen); // fen é a posição das peças no tabuleiro

  var salaId = 1;
  var players;
  var play = false;

  var state = document.getElementById('status');

  // -----q------socket ------->  
    function connect() {
    console.log("Cliente----> Connect executando sala: ", salaId);
    socket.emit('joined', salaId);
  }

  socket.on('full',  (msg) => {
    console.log("Cliente----> sala Cheia");
  });

  socket.on('play',  (msg) => {
    if (msg == salaId) {
      play = true;
      state.innerHTML = "Game in progress"
    }
    // console.log(mCliente----> sg)
  });
  socket.on('move',  (msg) => {
    game.move(msg.move);
    board.position(game.fen());
    console.log("Cliente----> moved")
  });
  // --------------------------- /socket ------->
  var removeGreySquares = function () {
    $('#board .square-55d63').css('background', '');
  };

  var greySquare = function (square) {
    var squareEl = $('#board .square-' + square);
    var background = '#a9a9a9';
    if (squareEl.hasClass('black-3c85d') === true) {
      background = '#696969';
    }
    squareEl.css('background', background);
  };

  var onDragStart = function (source, piece) {

    if (game.game_over() === true || play ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      (game.turn() === 'w' && color === 'black') ||
      (game.turn() === 'b' && color === 'white')) {
      return false;
    }
  };

  var onDrop = function (source, target) {
    removeGreySquares();
    var move = game.move({
      from: source,
      to: target,
      promotion: 'q'
    });

    if (game.game_over()) {
      state.innerHTML = 'GAME OVER';
      socket.emit('gameOver', salaId);
    }

    if (move === null) {
      return 'snapback';
    } else {
      socket.emit('move', {
        move: move, board: game.fen(), sala: salaId
      });
    }
  };

  var onMouseoverSquare = function (square, piece) {
    // get list of possible moves for this square
    var moves = game.moves({
      square: square,
      verbose: true
    });

    // exit if there are no moves available for this square
    if (moves.length === 0) return;

    // highlight the square they moused over
    greySquare(square);

    // highlight the possible squares for this piece
    for (var i = 0; i < moves.length; i++) {
      greySquare(moves[i].to);
    }
  };

  var onMouseoutSquare = function (square, piece) {
    removeGreySquares();
  };

  var onSnapEnd = function () {
    board.position(game.fen());
  };

  function updateStatus() {
    var status = ''

    var moveColor = '<b>branco</b>'
    if (game.turn() === 'b') {
      moveColor = '<b>preto</b>'
    }

    // checkmate?
    if (game.in_checkmate()) {
      status = 'É xeque-mate! Vitória do jogador ' + moveColor + '!'
    }

    // empate? (draw)
    else if (game.in_draw()) {
      status = 'O jogo empatou!'
    }
    // o jogo continua
    else {
      status = 'A vez é do jogador ' + moveColor + '.'

      // check?
      if (game.in_check()) {
        status += ', o jogador ' + moveColor + ' está em xeque.'
      }
    }

    document.getElementById('status').innerHTML = status;
  }

  socket.on('player', (players) => {
    console.log("Cliente : socket player");
    var plno = document.getElementById("player");

    if (players == 2) {
      play = true;
      socket.emit('play', salaId);
      //state.innerHTML = "Game in Progress";
      console.log("Game in progress");
    } else {
      console.log("Esperando segundo jogador");
    }
    var cfg = {
      orientation: (color == 'w') ? 'white' : 'black',
      draggable: true,
      position: fen,
      onDragStart: onDragStart,
      onDrop: onDrop,
      moveSpeed: 'slow',
      pieceTheme: '/img/chesspieces/wikipedia/{piece}.png',
      onMouseoutSquare: onMouseoutSquare,
      onMouseoverSquare: onMouseoverSquare,
      onSnapEnd: onSnapEnd
    };
    board = Chessboard('board', cfg);
  });
  var board;
</script>